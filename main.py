from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from sqlalchemy import select, union_all
import random
from telebot.handler_backends import State, StatesGroup
from translate import Translator

from db_module import create_engine, create_session, BotUser, Word, DelWord

db_type = input('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: postgresql\n')
db_login = input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n')
db_pass = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n')
db_host = input('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n')
db_port = input('–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n')
db_name = input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n')

if not db_type:
    db_type = 'postgresql'
if not db_login:
    db_login = 'postgres'
if not db_pass:
    db_pass = 'postgres'
if not db_host:
    db_host = 'localhost'
if not db_port:
    db_port = 5432
if not db_name:
    db_name = 'postgres'

DSN = f'{db_type}://{db_login}:{db_pass}@{db_host}:{db_port}/{db_name}'
engine = create_engine(DSN)
session = create_session(engine)

token = '7071798660:AAHrL4J72sDLzQn_BV32YDLoA9HGSyXEQg8'
state_storage = StateMemoryStorage()
bot = TeleBot(token, state_storage=state_storage)

buttons = []
shown_words = {}


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    en_word = State()
    ru_word = State()
    ad_word = State()


def show_target(data):
    return f"{data['en_word']} -> {data['ru_word']}"


def show_hint(*lines):
    return '\n'.join(lines)


def get_user_id(cid):

    """–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞"""

    q = select(BotUser).select_from(BotUser).where(BotUser.chat_id == cid)
    r = session.execute(q).scalar()
    if r:
        result = r.id
    else:
        result = None
    return result


def get_word_id(word, user_id):

    """–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–ª–æ–≤–∞ –ø–æ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—é"""

    u = union_all(
        select(Word).select_from(Word).where(Word.en_word == word, Word.user_id == user_id),
        select(Word).select_from(Word).where(Word.en_word == word, Word.user_id == None)
    )
    q = select(Word).from_statement(u)
    r = session.execute(q).scalar()
    if r:
        result = r.id
    else:
        result = None
    return result


def add_new_word(message):

    """–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    cid = message.chat.id
    uid = get_user_id(cid)
    en_word = message.text.lower().strip()
    if not en_word.isalpha():
        r = '–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'
        bot.send_message(message.chat.id, r)
    else:
        if get_word_id(en_word, uid):
            r = '–°–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ'
            bot.send_message(message.chat.id, r)
        else:
            try:
                ts = Translator(to_lang="Russian")
                ru_word = ''.join(x for x in ts.translate(en_word) if x.isalpha()).lower()
                word = Word(en_word=en_word, ru_word=ru_word, user_id=uid)
                session.add(word)
                session.commit()
                all_my_words = get_all_my_words(cid)
                my_words_count = len(list(set(all_my_words[0]).difference(set(all_my_words[1]))))
                r = (f'–°–ª–æ–≤–æ {en_word} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º {ru_word}.'
                     f'\n–í—ã –∏–∑—É—á–∞–µ—Ç–µ {my_words_count} —Å–ª–æ–≤. –û—Ç–ª–∏—á–Ω–æ!‚ù§')
                bot.send_message(message.chat.id, r)
            except:
                r = '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ'
                bot.send_message(message.chat.id, r)


def get_all_my_words(cid):

    """–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—É—á–∏–≤–∞–µ–º—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    my_words = []
    del_words = []
    uid = get_user_id(cid)
    u = union_all(
        select(Word).select_from(Word).where(Word.user_id == uid),
        select(Word).select_from(Word).where(Word.user_id == None)
    )
    q1 = select(Word).from_statement(u)
    for obj in session.execute(q1).scalars():
        my_words.append(obj.id)

    q2 = select(DelWord).select_from(DelWord).where(DelWord.user_id == uid)
    for obj in session.execute(q2).scalars():
        del_words.append(obj.word_id)
    return [my_words, del_words]


def choose_words(cid):

    """–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑–∞ –Ω—É–∂–Ω—ã—Ö —Å–ª–æ–≤, —Ç–æ –µ—Å—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞—É—á–∏–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤"""

    other_words = []
    global shown_words

    all_my_words = get_all_my_words(cid)
    unshown_words1 = list(set(all_my_words[0]).difference(set(all_my_words[1])))
    unshown_words2 = list(set(all_my_words[0]).difference(set(all_my_words[1])).difference(set(shown_words.get(cid))))
    if not unshown_words1:
        chosen_word_id = None
    elif unshown_words1 and not unshown_words2:
        chosen_word_id = random.choice(unshown_words1)
        shown_words[cid] = [chosen_word_id]
    else:
        chosen_word_id = random.choice(unshown_words2)
        add_id = shown_words.get(cid)
        add_id.append(chosen_word_id)
        shown_words[cid] = add_id

    if chosen_word_id:
        q3 = select(Word).select_from(Word).where(Word.id == chosen_word_id)
        r = session.execute(q3).scalar()
        chosen_word_en = r.en_word
        chosen_word_ru = r.ru_word

        q4 = select(Word).select_from(Word).where(Word.en_word != chosen_word_en)
        for obj in session.execute(q4).scalars():
            other_words.append(obj.en_word)
        ad_words = random.sample(other_words, 3)
        result = [chosen_word_id, chosen_word_en, chosen_word_ru, ad_words]
    else:
        result = []

    return result


welcome_message = (
    '–ü—Ä–∏–≤–µ—Ç üëã\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.'
    '\n\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.'
    ' –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: '
    '\n\n–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    '\n\n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå'
    '\n\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è'
)


@bot.message_handler(commands=['start'])
def create_cards(message):

    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ —Å–ª–æ–≤–∞–º–∏"""

    cid = message.chat.id
    uid = get_user_id(cid)
    global shown_words
    if not shown_words.get(cid):
        shown_words[cid] = []
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if not data:
                bot.send_message(message.chat.id, welcome_message)
                if not uid:
                    user = BotUser(chat_id=cid)
                    session.add(user)
                    session.commit()
                    bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞')
                else:
                    bot.send_message(message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º')
    except:
        pass
    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []
    chosen_words = choose_words(cid)
    if chosen_words:
        en_word = chosen_words[1]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
        ru_word = chosen_words[2]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
        en_btn = types.KeyboardButton(en_word)
        buttons.append(en_btn)
        ad_word = chosen_words[3]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
        ad_btn = [types.KeyboardButton(word) for word in ad_word]
        buttons.extend(ad_btn)
        random.shuffle(buttons)
        nxt_btn = types.KeyboardButton(Command.NEXT)
        add_btn = types.KeyboardButton(Command.ADD_WORD)
        del_btn = types.KeyboardButton(Command.DELETE_WORD)
        buttons.extend([del_btn, add_btn, nxt_btn])

        markup.add(*buttons)

        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {ru_word}"
        bot.send_message(message.chat.id, greeting, reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.en_word, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['en_word'] = en_word
            data['ru_word'] = ru_word
            data['ad_word'] = ad_word
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞')


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):

    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ —Å–ª–æ–≤–∞–º–∏"""

    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):

    """–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    cid = message.chat.id
    uid = get_user_id(cid)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if data:
            en_word = data['en_word']
            word_id = get_word_id(en_word, uid)
            q = select(DelWord).select_from(DelWord).where(DelWord.user_id == uid, DelWord.word_id == word_id)
            r = session.execute(q).scalar()
            if r:
                bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ {en_word} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤')
            else:
                del_word = DelWord(user_id=uid, word_id=word_id)
                session.add(del_word)
                session.commit()
                bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ {en_word} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤')
        else:
            bot.send_message(message.chat.id, '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å')


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):

    """–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –±–∞–∑—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º')
    bot.register_next_step_handler(send, add_new_word)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):

    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""

    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        en_word = data['en_word']
        if text == en_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!, " f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['ru_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
